import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Set random seed for reproducibility
np.random.seed(42)

# Constants
NUM_HOTELS = 5
ROOMS_PER_HOTEL = 100
DAYS_IN_YEAR = 365
OCCUPANCY_MIN = 0.70
OCCUPANCY_MAX = 0.90
ADR = [500, 300, 200, 150, 90]
BOOKING_CHANNELS = ['OTA', 'Direct', 'Group']
BOOKING_CHANNEL_PROB = [0.45, 0.45, 0.10]  # adjusted probabilities
AVG_LENGTH_OF_STAY = 3
MIN_LENGTH_OF_STAY = 1
MAX_LENGTH_OF_STAY = 20
AVG_LEAD_TIME = 7
MAX_LEAD_TIME = 200
NUM_CUSTOMERS = 150000

# Generate data
records = []

for hotel_id in range(1, NUM_HOTELS + 1):
    adr = ADR[hotel_id - 1]
    num_rooms = ROOMS_PER_HOTEL
    occupancy_rate = np.random.uniform(OCCUPANCY_MIN, OCCUPANCY_MAX)
    total_room_nights = int(num_rooms * DAYS_IN_YEAR * occupancy_rate)
    
    room_nights_count = 0
    
    while room_nights_count < total_room_nights:
        customer_id = np.random.randint(1, NUM_CUSTOMERS + 1)
        booking_channel = np.random.choice(BOOKING_CHANNELS, p=BOOKING_CHANNEL_PROB)
        
        checkin_date = datetime(2023, 1, 1) + timedelta(days=np.random.randint(0, DAYS_IN_YEAR))
        length_of_stay = np.random.randint(MIN_LENGTH_OF_STAY, MAX_LENGTH_OF_STAY + 1)
        checkout_date = checkin_date + timedelta(days=length_of_stay)
        
        lead_time = int(np.random.exponential(AVG_LEAD_TIME))
        lead_time = min(lead_time, MAX_LEAD_TIME)
        reservation_date = checkin_date - timedelta(days=lead_time)
        
        room_nights_count += length_of_stay
        
        records.append({
            'HotelID': hotel_id,
            'CustomerID': customer_id,
            'BookingChannel': booking_channel,
            'CheckinDate': checkin_date,
            'CheckoutDate': checkout_date,
            'ReservationDate': reservation_date,
            'ADR': adr
        })

# Create DataFrame
df = pd.DataFrame(records)

# Display some records
print(df.head())

# Save to Parquet
df.to_parquet('hotel_reservations.parquet', index=False)