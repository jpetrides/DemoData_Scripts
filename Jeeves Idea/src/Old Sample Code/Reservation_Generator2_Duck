import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import duckdb

# Set random seed for reproducibility
np.random.seed(42)

# Constants
NUM_HOTELS = 100
ROOMS_PER_HOTEL = 100
DAYS_IN_YEAR = 365
TOTAL_DAYS = 2 * DAYS_IN_YEAR  # 2 years of data
OCCUPANCY_MIN = 0.70
OCCUPANCY_MAX = 0.90
ADR = np.linspace(500, 100, NUM_HOTELS)  # Generate ADR values for 100 hotels
BOOKING_CHANNELS = ['OTA', 'Direct', 'Group']
BOOKING_CHANNEL_PROB = [0.45, 0.45, 0.10]  # Adjusted probabilities
AVG_LENGTH_OF_STAY = 3
MAX_LENGTH_OF_STAY = 20
AVG_LEAD_TIME = 7
MAX_LEAD_TIME = 200
NUM_CUSTOMERS = 150000

# Generate data
records = []

for hotel_id in range(1, NUM_HOTELS + 1):
    adr = ADR[hotel_id - 1]
    num_rooms = ROOMS_PER_HOTEL
    occupancy_rate = np.random.uniform(OCCUPANCY_MIN, OCCUPANCY_MAX)
    total_room_nights = int(num_rooms * TOTAL_DAYS * occupancy_rate)
    
    room_nights_count = 0
    daily_occupancy = np.zeros(TOTAL_DAYS)  # Track daily occupancy to prevent overbooking
    
    while room_nights_count < total_room_nights:
        customer_id = np.random.randint(1, NUM_CUSTOMERS + 1)
        booking_channel = np.random.choice(BOOKING_CHANNELS, p=BOOKING_CHANNEL_PROB)
        
        checkin_date = datetime(2023, 1, 1) + timedelta(days=np.random.randint(0, TOTAL_DAYS))
        length_of_stay = np.random.poisson(AVG_LENGTH_OF_STAY)
        if length_of_stay < 1:
            length_of_stay = 1
        if length_of_stay > MAX_LENGTH_OF_STAY:
            length_of_stay = MAX_LENGTH_OF_STAY
        
        checkout_date = checkin_date + timedelta(days=length_of_stay)
        
        # Ensure no overbooking
        checkin_day = (checkin_date - datetime(2023, 1, 1)).days
        checkout_day = (checkout_date - datetime(2023, 1, 1)).days
        if checkout_day > TOTAL_DAYS:
            checkout_day = TOTAL_DAYS
        
        if np.all(daily_occupancy[checkin_day:checkout_day] < num_rooms):
            daily_occupancy[checkin_day:checkout_day] += 1
            room_nights_count += length_of_stay
            
            lead_time = int(np.random.exponential(AVG_LEAD_TIME))
            lead_time = min(lead_time, MAX_LEAD_TIME)
            reservation_date = checkin_date - timedelta(days=lead_time)
            
            records.append({
                'HotelID': hotel_id,
                'CustomerID': customer_id,
                'BookingChannel': booking_channel,
                'CheckinDate': checkin_date,
                'CheckoutDate': checkout_date,
                'ReservationDate': reservation_date,
                'ADR': adr,
                'LengthOfStay': length_of_stay
            })

# Create DataFrame
df = pd.DataFrame(records)

# Connect to DuckDB
db_path = '/Users/jpetrides/Documents/Demo Data/Hotels/Jeeves Idea/hotel_reservations.duckdb'
con = duckdb.connect(db_path)

# Create table if not exists
con.execute('''
CREATE TABLE IF NOT EXISTS Reservations2 (
    HotelID INTEGER,
    CustomerID INTEGER,
    BookingChannel VARCHAR,
    CheckinDate TIMESTAMP,
    CheckoutDate TIMESTAMP,
    ReservationDate TIMESTAMP,
    ADR DOUBLE,
    LengthOfStay INTEGER
)
''')

# Insert data into the table
con.execute('''
INSERT INTO Reservations2
SELECT * FROM df
''')

# Close the connection
con.close()